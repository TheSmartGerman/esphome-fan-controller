#########################
# INITIAL SETUP
# GPIOs 
# Pinout for ESP32-C3 Super Mini
# https://www.sudo.is/docs/esphome/boards/esp32c3supermini/
# https://git.sudo.is/ben/infra/src/branch/main/roles/hass-esphome/files/packages/boards/esp32c3supermini.yaml

substitutions:
  name: inveter-fan-controller
  friendly_name: Inverter Fan Controller

  # GPIO - Pin definition
  gpio_vin: GPIO0   #VIN
  gpio_vin_adjust: 4.15 # Ajust to Input voltage
  
  # gpio 2 strapped pin - boot mode - 10k pull down
  
  # FANs
  gpio_fan_seeed_1: GPIO1 
  gpio_fan_speed_2: GPIO3
  gpio_fan_speed_3: GPIO4
  # ? GIPO5 - Only usable when WiFi not configured on the device ?
  
  # I2C - Display
  gpio_i2c_sda: GPIO6
  gpio_i2c_scl: GPIO7

  # Status LED
  gpio_led_status: GPIO8  # Built In LED GPIO8

  # OneWire
  # Strapped Pin GPI09 Bootmode 10k pullup at pcb
  gpio_temp: GPIO9 # onewire
  # one Wire - Adresses
  # dallas_address: "0x0d031455f7fxxxxxx" - only one Senosr so need to adress them

  # PWM
  gpio_pwm_fan: GPIO10 # PWM OUtput

  # UART - Not used yet
  # possible for RS485 Modbus ?
  gpio_uart_rx: GPIO20 # or OneWire (JP2)
  gpio_uart_tx: GPIO21 # or RPM4 (JP1)


esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0 # OTA / OneWire Breaking changes
  name_add_mac_suffix: false
  project:
    name: esp32.inveter_ext_fan_controller
    version: '0.1.0'
  platformio_options:
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB

# Throttle writing parameters to the internal flash memory to reduce ESP memory wear / degradation
preferences:
  flash_write_interval: 15min

 
#########################
# ESP32 AND NETWORK SETUP

esp32:
  board: esp32-c3-devkitm-1
  variant: esp32c3
  framework:
    type: arduino

# Enable logging
# pid climate log update is noisy, dial it back to warn
logger:
  level: debug
  baud_rate : 0 # disable hardware output
  logs: 
    climate: ERROR
#   dht: WARN

# default HA integration, OTA updater and backup http web portal
# Enable Home Assistant API
api:

# Allow Over-The-Air updates see changes 2024.6.0
ota:
- platform: esphome

packages:
  wifi: !include common/wifi.yaml
  debug: !include common/debug.yaml

# see changes 2024.6.0
one_wire:
  - platform: gpio
    pin: ${gpio_temp}

i2c:
  sda: ${gpio_i2c_sda}
  scl: ${gpio_i2c_scl}
  id: i2c_ssd1306

light:
  # https://esphome.io/components/status_led
  - platform: status_led
    name: "Status LED"
    id: esp_status_led
    icon: "mdi:alarm-light"
    pin:
      number: ${gpio_status_led}
      inverted: true
    restore_mode: ALWAYS_OFF

number:

  ## OPTIONAL:
  # RECEIVE KP, KI and KD parameters from input_text.kx helpers in 
  # Home Assistant. See the PID controller below
  # These helper values will get saved to flash thus permanently over-riding 
  # the initial values set in the PID below.

  # KP
  - platform: template
    name: kp
    icon: mdi:chart-bell-curve
    restore_value: true
    initial_value: 0.3
    min_value: 0
    max_value: 50
    step: 0.001
    set_action: 
      lambda: |- 
        id(console_thermostat).set_kp( x );

  # KI
  - platform: template
    name: ki
    icon: mdi:chart-bell-curve
    restore_value: true
    initial_value: 0.0015
    min_value: 0
    max_value: 50
    step: 0.0001
    set_action: 
      lambda: id(console_thermostat).set_ki( x );

  # KD
  - platform: template
    name: kd
    icon: mdi:chart-bell-curve
    restore_value: true
    initial_value: 0.0
    min_value: -50
    max_value: 50
    step: 0.001
    set_action: 
      lambda: id(console_thermostat).set_kd( x );

  # Set threshold low
  - platform: template
    name: Deadband Threshold Low
    icon: mdi:chart-bell-curve
    restore_value: true
    initial_value: -1.0
    min_value: -20
    max_value: 0
    step: 0.1
    set_action: 
      lambda: id(console_thermostat).set_threshold_low( x );

  # Set threshold high
  - platform: template
    name: Deadband Threshold High
    icon: mdi:chart-bell-curve
    restore_value: true
    initial_value: 0.4
    min_value: 0
    max_value: 20
    step: 0.1
    set_action: 
      lambda: id(console_thermostat).set_threshold_high( x );

  # Set ki multiplier
  - platform: template
    name: Deadband ki Multiplier
    icon: mdi:chart-bell-curve
    restore_value: true
    initial_value: 0.04
    min_value: 0
    max_value: .2
    step: 0.01
    set_action: 
      lambda: id(console_thermostat).set_ki_multiplier( x );

text_sensor:

  # Send IP Address
  - platform: wifi_info
    ip_address:
      name: $friendly_name IP Address

  # Send Uptime in raw seconds
  - platform: template
    name: $friendly_name Uptime
    id: uptime_human
    icon: mdi:clock-start

binary_sensor:
  - platform: status
    id: system_status

sensor:

  # Send WiFi signal strength & uptime to HA
  - platform: wifi_signal
    name: $friendly_name WiFi Strength
    update_interval: 60s

  # This is a bit of overkill. It sends a human readable 
  # uptime string 1h 41m 32s instead of 6092 seconds
  - platform: uptime
    name: $friendly_name Uptime
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            # Custom C++ code to generate the result
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  # Read the Tacho PIN and show measured RPM as a sensor (only with 4-pin PWM fans!)
  # FAN 1
  - platform: pulse_counter
    pin: 
      number: ${gpio_fan_seeed_1}   # Connect to any input PIN on the ESP
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: fan_speed_1
    name: $friendly_name Fan 1 Speed
    update_interval: 10s
    accuracy_decimals: 0
    filters:
      - multiply: 0.5  # Depending on how many pulses the fan sends per round - should be 0.5 or 1 - try...

  # FAN 2
  - platform: pulse_counter
    pin: 
      number: ${gpio_fan_speed_2}   # Connect to any input PIN on the ESP
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: fan_speed_2
    name: $friendly_name Fan 2 Speed
    update_interval: 10s
    accuracy_decimals: 0
    filters:
      - multiply: 0.5  # Depending on how many pulses the fan sends per round - should be 0.5 or 1 - try...

  # FAN 3
  - platform: pulse_counter
    pin: 
      number: ${gpio_fan_speed_3}   # Connect to any input PIN on the ESP
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: fan_speed_3
    name: $friendly_name Fan 3 Speed
    update_interval: 10s
    accuracy_decimals: 0
    filters:
      - multiply: 0.5  # Depending on how many pulses the fan sends per round - should be 0.5 or 1 - try...

  - platform: adc
    id: input_voltage
    pin: ${gpio_vin}
    attenuation: auto
    name: "Supply Voltage"
    accuracy_decimals: 2
    update_interval: 3s
    filters:
      - multiply: ${gpio_vin_adjust} #adjust acording to input voltage divider 

########################################################
# START THE FAN CONTROLLER SETUP

  - platform: template
    name: $friendly_name p term
    id: p_term
    unit_of_measurement: "%"
    accuracy_decimals: 2

  - platform: template
    name: $friendly_name i term
    id: i_term
    unit_of_measurement: "%"
    accuracy_decimals: 2

  - platform: template
    name: $friendly_name d term
    id: d_term
    unit_of_measurement: "%"
    accuracy_decimals: 2

  - platform: template
    name: $friendly_name output value
    unit_of_measurement: "%"
    id: o_term
    accuracy_decimals: 2

  - platform: template
    name: $friendly_name error value
    id: e_term
    accuracy_decimals: 2

  - platform: template
    name: $friendly_name is in deadband
    id: in_deadband_term
    accuracy_decimals: 0

# Target Temp from Climat  
  - platform: template
    name: $friendly_name Target Temperature
    id: target_temp
    accuracy_decimals: 2

  # GET TEMP/HUMIDITY FROM DHT11
  #- platform: dht
  #  pin: GPIO33
  #  temperature:
  #    name: "Temperature"
  #    id: console_fan_temperature
  #    accuracy_decimals: 3

      # If you don't smooth the temperature readings 
      # the PID controller over reacts to small changes.
 #     filters:
 #        - exponential_moving_average:  
 #            alpha: 0.1
 #            send_every: 1

 #   humidity:
 #     name: "Humidity"
 #     id: console_fan_humidity

    # the DHT11 can only be read every 1s. Use 1.3s to be safe.
 #   update_interval: 1.3s

## One Wire Sensore
  - platform: dallas_temp
    #address: ${dallas_address}
    name: "Temperature"
    id: console_fan_temperature
    accuracy_decimals: 3

    # If you don't smooth the temperature readings 
    # the PID controller over reacts to small changes.
    filters:
      - exponential_moving_average:  
          alpha: 0.1
          send_every: 1

    # the DHT11 can only be read every 1s. Use 1.3s to be safe.
    update_interval: 1.3s

  # Every time the fan speed is updated, this sensor will
  # also be updated for displaying on the frontend. 
  # See proxy_output.
  - platform: template
    name: "Fan Speed (PWM Voltage)"
    unit_of_measurement: "%"
    id: fan_speed_pwm_voltage

output:
  # Wire this pin into the PWM pin of your 12v fan
  # ledc is the name of the pwm output system on an esp32
  - platform: ledc
    id: console_fan_speed
    pin: ${gpio_pwm_fan}

    # 25KHz is standard PC fan frequency, minimises buzzing
    frequency: "25000 Hz" 

    # my fans stop working below 13% powerful.
    # also they're  powerful and loud, cap their max speed to 80%
    min_power: 13%
    max_power: 100% # 80%

    # At 0, actually turn it off, otherwise the power keeps going.
    zero_means_zero: true

  # This proxy output takes its input
  # if the manual fan control is on, use the level from that
  # otherwise use the PID control value.
  # Then publish the result to the fan (ledc) and 
  # also publish to the template output sensor
  - platform: template
    id: proxy_output
    type: float
    write_action:
      lambda: |-
        float write_val = 
          (id(manual_fan_control).state) ?
            id(manual_fan_control).speed / 100.0:
            write_val = state*1.0;
        id(console_fan_speed).set_level(write_val);
        id(fan_speed_pwm_voltage).publish_state(write_val*100.0);

# If you turn this on, you can manually set the fan speed.
# The PID will be ignored. This is done via the proxy_output.
fan:
  - platform: speed
    id: manual_fan_control
    output: proxy_output
    name: "Manual Fan Speed"

# Expose a PID-controlled Thermostat
# Manual: https://esphome.io/components/climate/pid.html
climate:
  - platform: pid
    name: "Console Fan Thermostat"
    id: console_thermostat
    sensor: console_fan_temperature

    # It is summer right now, so 30c is a decent target.
    default_target_temperature: 30°C
    cool_output: proxy_output
    # cool_output: console_fan_speed

    # ON state change, publish the values to the x_term numbers defined 
    # above, so that they can be viewed in HA
    on_state:
      - sensor.template.publish:
          id: p_term
          state: !lambda 'return -id(console_thermostat).get_proportional_term() * 100.0;'
      - sensor.template.publish:
          id: i_term
          state: !lambda 'return -id(console_thermostat).get_integral_term()* 100.0;'
      - sensor.template.publish:
          id: d_term
          state: !lambda 'return -id(console_thermostat).get_derivative_term()* 100.0;'
      - sensor.template.publish:
          id: o_term
          state: !lambda 'return -id(console_thermostat).get_output_value()* 100.0;'
      - sensor.template.publish:
          id: in_deadband_term
          state: !lambda 'return id(console_thermostat).in_deadband();'
      - sensor.template.publish:
          id: e_term
          state: !lambda 'return -id(console_thermostat).get_error_value();'
      - sensor.template.publish:
          id: target_temp
          state: !lambda 'return id(console_thermostat).target_temperature;'
        
    # The extents of the HA Thermostat
    visual:
      min_temperature: 20 °C
      max_temperature: 60 °C
  
    # See the README for setting up these parameters.
    # These are over ridden by the number templates above.
    control_parameters:
      kp: 0.3
      ki: 0.0015
      kd: 0
      max_integral: 0.0
      output_averaging_samples: 1
      derivative_averaging_samples: 5

    # How to behave when close to the target temperature?
    deadband_parameters:
      threshold_high: 0.4°C
      threshold_low: -1.0°C
      kp_multiplier: 0.0
      ki_multiplier: 0.04
      kd_multiplier: 0.0
      deadband_output_averaging_samples: 15

switch:
  # Expose an ESP32 restart button to HA
  - platform: restart
    name: ${friendly_name} ESP32 Restart
    id: console_fan_restart

# Restart every day at 12:30am. 
# I've had some memory issues lockup 
# the device after a couple weeks
#time:
#  - platform: homeassistant
#    on_time:
      # Every morning at 12:30am
#    - seconds: 0
#      minutes: 30
#      hours: 0
#      then:
#       - switch.turn_on: console_fan_restart


# I was able to find good KP,KI,KD values manually, per the instructions,
# but you can try pressing the autotune button from home assistant and copying the 
# values it produces. 
# See more at: https://esphome.io/components/climate/pid.html#climate-pid-autotune-action
button:
- platform: template
  name: "PID Climate Autotune"
  on_press: 
    - climate.pid.autotune: console_thermostat
    
# https://esphome.io/components/display/ssd1306.html?highlight=display%20i2c
# Font https://github.com/edx/edx-fonts/tree/master/open-sans
font:
- file: "fonts/OpenSans-Regular.ttf"
    #url: "https://github.com/edx/edx-fonts/blob/master/open-sans/fonts/Regular/OpenSans-Regular.ttf"
    #type: web
  id: my_font_h1
  size: 20

- file: "fonts/OpenSans-Regular.ttf"
    #url: "https://github.com/edx/edx-fonts/blob/master/open-sans/fonts/Regular/OpenSans-Regular.ttf"
    #type: web
  id: my_font_h2
  size: 18

- file: "fonts/OpenSans-Regular.ttf"
    #url: "https://github.com/edx/edx-fonts/blob/master/open-sans/fonts/Regular/OpenSans-Regular.ttf"
    #type: web
  id: my_font_h3
  size: 16

- file: "fonts/OpenSans-Regular.ttf"
    #url: "https://github.com/edx/edx-fonts/blob/master/open-sans/fonts/Regular/OpenSans-Regular.ttf"
    #type: web
  id: my_font_p
  size: 12

- file: "fonts/OpenSans-Regular.ttf"
    #url: "https://github.com/edx/edx-fonts/blob/master/open-sans/fonts/Regular/OpenSans-Regular.ttf"
    #type: web
  id: my_font_small
  size: 10

# For example cycle through pages on a timer
interval:
  - interval: 15s
    then:
      - display.page.show_next: my_display
      - component.update: my_display

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    id: my_display
    # or 'ssd1306'
    #reset_pin: D0
    address: 0x3C
    i2c_id: i2c_ssd1306
    pages:
    - id: page1
      lambda: |-
        it.printf(0, 0, id(my_font_small), "Now: %.1f°C", id(console_fan_temperature).state);
        it.printf(64, 0, id(my_font_small), "Goal: %.1f°C", id(target_temp).state);
        it.printf(0, 11, id(my_font_small), "FAN 1: %.0f rpm", id(fan_speed_1).state);
        it.printf(0, 22, id(my_font_small), "FAN 2: %.0f rpm", id(fan_speed_2).state);
        it.printf(0, 33, id(my_font_small), "FAN 3: %.0f rpm", id(fan_speed_3).state);    
        it.printf(0, 44, id(my_font_small), "FAN Speed: %.0f %", id(fan_speed_pwm_voltage).state);

    - id: page2
      lambda: |-
        it.printf(0, 0, id(my_font_small), "FAN 100rpm/div 10min");
        it.graph(0, 14, id(multi_rpm_graph));    
  
    - id: page3
      lambda: |-
        it.printf(0, 0, id(my_font_small), "Temp 10°C/div 10min");
        it.graph(0, 14, id(multi_temperature_graph));   

## https://esphome.io/components/display/#graph-component
## https://koen.vervloesem.eu/blog/showing-a-graph-on-a-display-with-esphome/
graph:
  # Show bare-minimum auto-ranged graph
  - id: single_temperature_graph
    sensor: console_fan_temperature
    duration: 10min
    width: 126
    height: 64
    border: false

  - id: multi_temperature_graph
    duration: 10min
    x_grid: 1min
    y_grid: 10.0     # degC/div
    border: false
    width: 126
    height: 50
    traces:
      - sensor: console_fan_temperature
        line_type: DASHED
        line_thickness: 1
        color: my_green
      - sensor: target_temp
        line_type: SOLID
        line_thickness: 2
        color: my_red

  - id: multi_rpm_graph
    duration: 10min
    x_grid: 1min
    y_grid: 100.0     # degC/div
    border: false
    width: 126
    height: 50
    traces:
      - sensor: fan_speed_pwm_voltage
        line_type: DOTTED
        continuous: true
        line_thickness: 1
        color: my_blue

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%